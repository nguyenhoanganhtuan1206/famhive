import type { ICommand, ICommandHandler } from '@nestjs/cqrs';
import { CommandHandler } from '@nestjs/cqrs';

import type { UserEntity } from '../../user/user.entity';
import { TodoService } from '../todo.service';
import { ActionPlanType } from '../types/action-plan.type';
import { TodoType } from '../types/todo.type';

export class CreateAutoGeneratedTaskCommand implements ICommand {
  constructor(public readonly user: UserEntity) {}
}

@CommandHandler(CreateAutoGeneratedTaskCommand)
export class CreateAutoGeneratedTaskHandler
  implements ICommandHandler<CreateAutoGeneratedTaskCommand, void>
{
  constructor(private readonly todoService: TodoService) {}

  async execute(command: CreateAutoGeneratedTaskCommand): Promise<void> {
    const defaultTasks = [
      {
        title: 'Create first event',
        actionPlain: ActionPlanType.CREATE_FIRST_EVENT,
      },
      {
        title: 'Prepare your shopping list',
        actionPlain: ActionPlanType.CREATE_FIRST_BUY,
      },
      {
        title: 'Invite spouse/kids to your family',
        actionPlain: ActionPlanType.CREATE_FIRST_SPOUSE_OR_KIDS,
      },
    ];

    const dueDate = new Date();
    await Promise.all(
      defaultTasks.map((task) =>
        this.todoService.create(command.user, {
          type: TodoType.TASK,
          text: task.title,
          dueDate,
          isDone: false,
          assigneeIds: [command.user.id],
          award: 1,
          actionPlan: task.actionPlain,
          isAutoGenerated: true,
        }),
      ),
    );
  }
}
