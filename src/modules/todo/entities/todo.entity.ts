import {
  Column,
  Entity,
  JoinColumn,
  JoinTable,
  ManyToMany,
  ManyToOne,
} from 'typeorm';

import { AbstractEntity } from '../../../common/abstract.entity';
import { RecurringType } from '../../../constants/recurring-type';
import { UseDto } from '../../../decorators';
import { WeekDayType } from '../../../modules/event/types/event.type';
import { FamilyEntity } from '../../family/entities/family.entity';
import { UserEntity } from '../../user/user.entity';
import { TodoDto } from '../dto/todo.dto';
import { ActionPlanType } from '../types/action-plan.type';
import { TodoType } from '../types/todo.type';
import { TodoCategoryEntity } from './todo-category.entity';

@Entity('todos')
@UseDto(TodoDto)
export class TodoEntity extends AbstractEntity<TodoDto> {
  @Column()
  type: TodoType;

  @Column()
  text: string;

  @Column({ default: false })
  isDone: boolean;

  @ManyToMany(() => UserEntity, {
    onUpdate: 'CASCADE',
    onDelete: 'CASCADE',
  })
  @JoinTable()
  assignees: UserEntity[];

  @Column()
  familyId: Uuid;

  @ManyToOne(() => FamilyEntity, (family) => family.todos, {
    onUpdate: 'CASCADE',
    onDelete: 'CASCADE',
  })
  @JoinColumn({ foreignKeyConstraintName: 'fk_todo_family' })
  family: FamilyEntity;

  @Column({ nullable: true })
  dueDate?: Date;

  @Column({ default: 0 })
  award: number;

  @Column({ default: false })
  isAutoGenerated: boolean;

  @Column({
    type: 'varchar',
    length: '50',
    nullable: true,
    enum: ActionPlanType,
  })
  actionPlan: ActionPlanType;

  @Column({ nullable: true })
  categoryId: Uuid;

  @ManyToOne(() => TodoCategoryEntity, {
    onUpdate: 'CASCADE',
    onDelete: 'CASCADE',
  })
  @JoinColumn({ foreignKeyConstraintName: 'fk_todo_todo_category' })
  category: TodoCategoryEntity;

  @Column({ default: false })
  byGpt: boolean;

  @Column({ default: false })
  isRecurring: boolean;

  @Column({ type: 'enum', enum: RecurringType, nullable: true })
  recurringType?: RecurringType;

  @Column({ type: 'timestamp', nullable: true })
  untilDateTime?: Date | undefined;

  @Column({
    type: 'enum',
    enum: WeekDayType,
    array: true,
    nullable: true,
  })
  byWeekDay?: WeekDayType[];

  @Column({ nullable: true })
  rrule?: string;
}
