import { BadRequestException, Injectable } from '@nestjs/common';
import { CommandBus } from '@nestjs/cqrs';
import { JwtService } from '@nestjs/jwt';
import { InjectRepository } from '@nestjs/typeorm';
import _ from 'lodash';
import { Repository } from 'typeorm';
import { Transactional } from 'typeorm-transactional';

import { validateHash } from '../../common/utils';
import { RoleType, TokenType } from '../../constants';
import { UserNotFoundException } from '../../exceptions';
import { ApiConfigService } from '../../shared/services/api-config.service';
import { getLastsMinutes } from '../../utils/date.utils';
import { getDomainFromRequest } from '../../utils/domain.utils';
import { generateCode } from '../../utils/string.utils';
import { DeleteDeviceCommand } from '../device/commands/delete-device.command';
import { CreateOfficialEventCommand } from '../event/commands/create-official-event.command';
import { CreateFamilyCommand } from '../family/commands/create-family.command';
import { DeleteFamilyCommand } from '../family/commands/delete-family.command';
import type { FamilyEntity } from '../family/entities/family.entity';
import { SendMailCommand } from '../mailer/commands/send-mail.command';
import { CreateAutoGeneratedTaskCommand } from '../todo/commands/create-auto-generated-task.command';
import { FindUsersByCommand } from '../user/commands/find-user-by.command';
import { UserEntity } from '../user/user.entity';
import { CreateUserConfigurationCommand } from './../user/commands/create-configuration.command';
import { FindUserConfigurationCommand } from './../user/commands/find-configuration.command';
import type { UserConfigurationDto } from './../user/dtos/user-configuration.dto';
import type { UserConfigurationEntity } from './../user/user-configuration.entity';
import type { ISocialUser } from './dto/social-user';
import { TokenPayloadDto } from './dto/token-payload.dto';
import type { UserLoginDto } from './dto/user-login.dto';
import { UserRegisterDto } from './dto/user-register.dto';

@Injectable()
export class AuthService {
  constructor(
    private jwtService: JwtService,
    private configService: ApiConfigService,
    @InjectRepository(UserEntity)
    private userRepository: Repository<UserEntity>,
    private commandBus: CommandBus,
  ) {}

  async createAccessToken(user: UserEntity) {
    return new TokenPayloadDto({
      expiresIn: this.configService.authConfig.jwtExpirationTime,
      accessToken: await this.jwtService.signAsync({
        userId: user.id,
        type: TokenType.ACCESS_TOKEN,
        role: user.role,
      }),
    });
  }

  async verifyEmail(id: Uuid, verifyCode: string): Promise<boolean> {
    const user = await this.userRepository.findOneBy({
      id,
      verifyCode,
      verified: false,
    });

    if (
      user === null ||
      !user.verifyCodeCreatedAt ||
      getLastsMinutes(user.verifyCodeCreatedAt) > 60
    ) {
      return false;
    }

    user.verified = true;
    user.verifyCodeCreatedAt = undefined;
    user.verifyCode = undefined;

    await this.userRepository.save(user);

    return true;
  }

  async manuallyLogin(userLoginDto: UserLoginDto): Promise<UserEntity> {
    const user = await this.findUserByEmail(userLoginDto.email);

    const isPasswordValid = await validateHash(
      userLoginDto.password,
      user?.password,
    );

    if (!isPasswordValid || !user) {
      throw new UserNotFoundException();
    }

    return user;
  }

  async logout(user: UserEntity, identifier: string): Promise<void> {
    await this.commandBus.execute<DeleteDeviceCommand, void>(
      new DeleteDeviceCommand(user.id, identifier),
    );
  }

  @Transactional()
  async deleteUser(user: UserEntity) {
    if (user.role === RoleType.ADMIN) {
      await this.deleteFamily(user.familyId);
    }

    await this.userRepository.delete(user.id);
  }

  @Transactional()
  async createUser(
    request: Request,
    userRegisterDto: UserRegisterDto,
  ): Promise<UserEntity> {
    const domain = getDomainFromRequest(request);
    const existingUser = await this.findUserByEmail(userRegisterDto.email);

    if (existingUser !== null) {
      if (
        existingUser.role === RoleType.SPOUSE ||
        existingUser.role === RoleType.KID
      ) {
        // update password and verify code for spouse
        const familyMember = await this.userRepository.save({
          ...existingUser,
          ...userRegisterDto,
          verified: false,
          activated: true,
          verifyCode: generateCode(),
          verifyCodeCreatedAt: new Date(),
        });
        await this.createUserConfigurationDefault(familyMember);

        // get inviter
        const inviter = await this.commandBus.execute(
          new FindUsersByCommand({
            familyId: familyMember.familyId,
            role: RoleType.ADMIN,
          }),
        );

        // send email verify family member
        await this.sendFamilyMemberConfirmation(userRegisterDto.email, {
          userId: familyMember.id,
          verifyCode: familyMember.verifyCode,
          inviter: _.get(inviter, [0, 'fullName']),
          domain,
        });

        return familyMember;
      }

      throw new BadRequestException(
        `Email ${userRegisterDto.email} is not available`,
      );
    }

    const user = await this.createAdminUserAndFamily({
      ...userRegisterDto,
      verified: false,
      activated: true,
      verifyCode: generateCode(),
      verifyCodeCreatedAt: new Date(),
    });

    await this.sendRegisterWelcome(userRegisterDto.email, {
      userId: user.id,
      verifyCode: user.verifyCode,
      fullName: user.fullName,
      domain,
    });
    await this.createUserConfigurationDefault(user);

    return user;
  }

  private async createUserConfigurationDefault(user: UserEntity) {
    const userConfiguration: UserConfigurationDto = {
      isShowTaskDone: true,
      isShowTodoDone: true,
    };

    return this.commandBus.execute<
      CreateUserConfigurationCommand,
      UserConfigurationEntity
    >(new CreateUserConfigurationCommand(user.id, userConfiguration));
  }

  private async sendRegisterWelcome(
    to: string,
    data: {
      userId: string;
      verifyCode?: string;
      fullName?: string;
      domain: string;
    },
  ) {
    await this.commandBus.execute(
      new SendMailCommand({
        to,
        templateName: 'register-welcome',
        data: {
          fullName: data.fullName,
          verificationLink: `${data.domain}/v1/auth/verify-email?id=${data.userId}&code=${data.verifyCode}`,
        },
      }),
    );
  }

  private async sendFamilyMemberConfirmation(
    to: string,
    data: {
      userId: string;
      verifyCode?: string;
      inviter?: string;
      domain: string;
    },
  ) {
    await this.commandBus.execute(
      new SendMailCommand({
        to,
        templateName: 'family-member-confirmation',
        data: {
          inviter: data.inviter,
          verificationLink: `${data.domain}/v1/auth/verify-email?id=${data.userId}&code=${data.verifyCode}`,
        },
      }),
    );
  }

  async createSocialUser(socialUser: ISocialUser) {
    const user = await this.findUserByEmail(socialUser.email);

    if (user) {
      user.verified = true;

      return this.userRepository.save(user);
    }

    return this.createAdminUserAndFamily({
      ...socialUser,
      verified: true,
    });
  }

  private async createAdminUserAndFamily(user: Partial<UserEntity>) {
    const family = await this.createFamily();

    const newUser = this.userRepository.create({
      ...user,
      familyId: family.id,
      role: RoleType.ADMIN,
    });

    const newUserCreated = await this.userRepository.save(newUser);

    // create default tasks after user created
    await this.createAutoGeneratedTasks(newUserCreated);
    // create default events after user created
    await this.createOfficialEvents(newUserCreated);

    return newUserCreated;
  }

  private createFamily() {
    return this.commandBus.execute<CreateFamilyCommand, FamilyEntity>(
      new CreateFamilyCommand(),
    );
  }

  private createAutoGeneratedTasks(user: UserEntity) {
    return this.commandBus.execute<CreateAutoGeneratedTaskCommand, void>(
      new CreateAutoGeneratedTaskCommand(user),
    );
  }

  private createOfficialEvents(user: UserEntity) {
    return this.commandBus.execute<CreateOfficialEventCommand, void>(
      new CreateOfficialEventCommand(user),
    );
  }

  private deleteFamily(familyId: Uuid) {
    return this.commandBus.execute<DeleteFamilyCommand>(
      new DeleteFamilyCommand(familyId),
    );
  }

  private findUserByEmail(email: string) {
    return this.userRepository.findOne({
      where: { email },
      relations: {
        configuration: true,
      },
    });
  }

  async getMe(user: UserEntity) {
    user.configuration = await this.commandBus.execute<
      FindUserConfigurationCommand,
      UserConfigurationEntity
    >(new FindUserConfigurationCommand(user.id));

    return user.toDto();
  }
}
